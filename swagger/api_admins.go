/*
 * login delegation
 *
 * This is an api service for openshift to login with basic authentication
 *
 * API version: 1.0.0
 * Contact: yang.chenjun@99cloud.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/base64"
	"encoding/json"
	"net/http"
	"strings"
)
func OpenShiftLogin(w http.ResponseWriter, r *http.Request)  {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	// parse the http header to get username and password
	auth := strings.Replace(r.Header["Authorization"][0],"Basic ", "", 1)
	credential, _ := base64.StdEncoding.DecodeString(auth)
	userAndPassword := strings.Split(string(credential), ":")
	// fake login.
	js, httpStatus := validateUser(User { Username: userAndPassword[0], Password: userAndPassword[1]})
	w.WriteHeader(httpStatus)
	execStatus, err := w.Write(js)
	if err != nil {
		w.WriteHeader(execStatus)
		w.Write(marshaUp(err))
	}
}

func validateUser(user User)  ([]byte, int){
	fUser := fakeUser(user.Username, user.Password)
	if fUser.Id != ""{
		// return 200
		return marshaUp(fUser), http.StatusOK
	} else
	{
		// return 401 error if username or password is not right
		return marshaUp(InlineResponse401{ Error_: "Username or Password is not correct" }), http.StatusUnauthorized
	}
}

func marshaUp(obj interface{}) []byte{
	data, err := json.Marshal(obj)
	if err != nil {
		return []byte{}
	}
	return data
}

func fakeUser(username, password string) User {
	// fake user validation, because we don`t want messing around with db right now
	fUser := User { Username: "simon", Password: "123456", Id: "112233445566", Email: "xxx@gmail.com", Sub: "112233445566", PreferredUsername: "simon" }
	if username == fUser.Username && password == fUser.Password {
		return fUser
	}
	return User{}
}
